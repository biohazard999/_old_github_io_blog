<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
<channel>
        <title>paraOffice - Team Blog</title>
        <description>paraOffice - Team Blog - Manuel Grundner</description>
        <link>http://biohazard999.github.io</link>
        <link>http://biohazard999.github.io</link>
        <lastBuildDate>2015-02-27T18:36:18+01:00</lastBuildDate>
        <pubDate>2015-02-27T18:36:18+01:00</pubDate>
        <ttl>1800</ttl>


        <item>
                <title>Hello World</title>
                <description>
</description>
                <link>http://biohazard999.github.io/2015/02/27/hello-world</link>
                <guid>http://biohazard999.github.io/2015/02/27/hello-world</guid>
                <pubDate>2015-02-27T00:00:00+01:00</pubDate>
        </item>

        <item>
                <title>Real MTier with DevExpress (Part 1)</title>
                <description>
&lt;h2 id=&quot;technologie-overview&quot;&gt;Technologie overview&lt;/h2&gt;

&lt;p&gt;First of all one thing:&lt;/p&gt;

&lt;p&gt;I like &lt;a href=&quot;http://www.devexpress.com/&quot;&gt;DevExpress&lt;/a&gt; and their controls, but i’m dissatisfied with the speed of the development on the mobile sector with large scaling &lt;a href=&quot;http://www.devexpress.com/Subscriptions/DXperience/WhatsNew2012v1/xaf.xml&quot;&gt;XAF&lt;/a&gt; applications and the way they are managing their APIs. The options for developers are very restrictive in a manor of extensibility (thanks to VB.NET customers, i think. We develop C#. &lt;strong&gt;WE&lt;/strong&gt; know what we shall or not shall do!). Why the fuck is every second method we like to use is fucking Browsable(false) or internal or is only reachable with real reflection pain? “For internal use only”? Are you fucking kidding me? DevExpress, please think of us developers when designing your APIs, not business analysts and script kiddies :(&lt;/p&gt;

&lt;p&gt;Phew, that has done well. :)&lt;/p&gt;

&lt;p&gt;Our main product is published to a wide range of clients, from small size scaling up to the enterprise sector. &lt;/p&gt;

&lt;p&gt;One thing i really miss in our Portfolio are native apps for all kind of customers mobile devices. One real need for native apps is offline availability of the clients data (enterprise customers need to access their data anytime, regardless of connectionstate). So a Web solution will &lt;strong&gt;NOT&lt;/strong&gt; meet our customers needs. Gladly we found &lt;a href=&quot;http://xamarin.com/monoforandroid&quot;&gt;Mono For Android&lt;/a&gt; and the &lt;a href=&quot;http://xamarin.com/monotouch&quot;&gt;MonoTouch&lt;/a&gt; framework from the &lt;a href=&quot;http://xamarin.com/&quot;&gt;Xamarin&lt;/a&gt; guys.&lt;/p&gt;

&lt;h2 id=&quot;technologie-decision&quot;&gt;Technologie decision&lt;/h2&gt;

&lt;p&gt;But what data transport protocol should we use to support all upcomming platforms? &lt;a href=&quot;http://msdn.microsoft.com/en-us/netframework/aa663324.aspx&quot;&gt;WCF&lt;/a&gt;? &lt;a href=&quot;http://www.w3.org/TR/soap/&quot;&gt;SOAP&lt;/a&gt;? &lt;a href=&quot;http://www.odata.org/&quot;&gt;OData&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;I think pure WCF is a overkill for most of our needs, and there is no tooling on all of our planned supported platforms (IOS for example).&lt;/p&gt;

&lt;p&gt;SOAP has the problem that the effort to implement and extend a service for all our needs will take too long, and is a horror in maintainability across our customer needs. There is so much work on the meta-model before we get anything out/back from/to our database model.&lt;/p&gt;

&lt;h2 id=&quot;devexpress-and-odata&quot;&gt;DevExpress and OData&lt;/h2&gt;

&lt;p&gt;Then, all of a sudden, DevExpress announced &lt;a href=&quot;http://xpo.codeplex.com/&quot;&gt;support&lt;/a&gt; for OData in combination with &lt;a href=&quot;http://www.devexpress.com/Products/NET/ORM/&quot;&gt;XPO&lt;/a&gt;. Hurray! Getting the hands on the first versions and the result was sobering. :(&lt;/p&gt;

&lt;p&gt;We have a huge XPO-Model (800+ PeristentClasses) with a legacy Database (migrating from our delphi application) and a legacy XPO-Model (many many many rookie mistakes was made in the beginning of migration).&lt;/p&gt;

&lt;p&gt;Our Namespace model looks like something like this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;OurProduct.Model.Products
    &lt;ul&gt;
      &lt;li&gt;Product.cs&lt;/li&gt;
      &lt;li&gt;ProductCategory.cs&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;OurProduct.Model.Customer
    &lt;ul&gt;
      &lt;li&gt;Customer.cs&lt;/li&gt;
      &lt;li&gt;ContactInformation.cs&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The problem here is there is no way to tell the XPO-Context-Driver to export complex types across different namespaces. That means we have to fetch up our data clientside with multiple queries to the OData-Service which is annoying and not very performant.&lt;/p&gt;

&lt;p&gt;The second thing: The documentation was terrible. I don’t know if there was a ability to filter out some of our classes from the ResourceSets.&lt;/p&gt;

&lt;p&gt;So we decided to wait until DevExpress brings us new features with the next releases.&lt;/p&gt;

&lt;p&gt;Starting with &lt;a href=&quot;http://www.devexpress.com/Subscriptions/DXperience/WhatsNew2012v1/index.xml?page=58&quot;&gt;DXperience-12.1&lt;/a&gt; they did a great job of cleaning the direct dependency of XAF on XPO. Nice stuff. And tadaaa there was the direct integration of &lt;a href=&quot;http://www.devexpress.com/Support/Center/p/Q408635.aspx&quot;&gt;OData into XPO&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;And yes in this version the filtering of the ResourceSets is integrated! Also the Namespace is included in the Classname (sure not pretty, but hey it works!). Now we can start using this stuff and do some really cool things.&lt;/p&gt;

&lt;h2 id=&quot;the-code&quot;&gt;The Code&lt;/h2&gt;

&lt;p&gt;The code is pretty strate forward:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System;
using System.Collections.Generic;
using System.Data.Services;
using System.Data.Services.Common;
using DevExpress.Xpo.DB;
using DevExpress.Xpo;
using System.ServiceModel;
using DevExpress.Persistent.BaseImpl;

namespace MultitierSolution.OData
{
    [ServiceBehavior(InstanceContextMode = InstanceContextMode.Single)]
    public class MultitierSolutionODataService : XpoDataService
    {

        public MultitierSolutionODataService() : base(new MultitierSolutionContext(&quot;XpoContext&quot;, &quot;MultitierSolutionModel&quot;, CreateDataLayer())) { }

        static IDataLayer CreateDataLayer()
        {
            string conn = MySqlConnectionProvider.GetConnectionString(&quot;servername&quot;, &quot;user&quot;, &quot;password&quot;, &quot;database&quot;);
            DevExpress.Xpo.Metadata.XPDictionary dict = new DevExpress.Xpo.Metadata.ReflectionDictionary();
            // Initialize the XPO dictionary. 
            dict.GetDataStoreSchema(typeof(Event).Assembly);
            IDataStore store = XpoDefault.GetConnectionProvider(conn, DevExpress.Xpo.DB.AutoCreateOption.SchemaAlreadyExists);
            return new ThreadSafeDataLayer(dict, store);
        }
        public static void InitializeService(DataServiceConfiguration config)
        {
            config.SetEntitySetAccessRule(&quot;*&quot;, EntitySetRights.AllRead);
            config.DataServiceBehavior.MaxProtocolVersion = DataServiceProtocolVersion.V2;
            config.DataServiceBehavior.AcceptProjectionRequests = true;
        }
    }

    public class MultitierSolutionContext : XpoContext
    {
        public MultitierSolutionContext(string containerName, string namespaceName, IDataLayer dataLayer)
            : base(containerName, namespaceName, dataLayer) { }

        public override bool HideMetaDataResourceProperty(Type classType, string propertyName)
        {
            if (classType == typeof(Event) &amp;amp;&amp;amp; propertyName == &quot;resourceIds&quot;)
                return true;
            return false;
        }

        public override bool HideMetaDataResourceSet(Type classType)
        {
            if (classType == typeof(Event))
                return false;

            return true;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.paraoffice.at/get/screenshots/odata-t4-winrt-mono-for-android-and-devexpres/MultitierSolution_OData_Project.png&quot; alt=&quot;Project overview of ODataService&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now whe have what we want. Only events are publised to the OData-Serivce:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;iso-8859-1&quot; standalone=&quot;yes&quot;?&amp;gt;    
&amp;lt;service xml:base=&quot;http://localhost/MultitierSolution.OData/ODataDemoService.svc/&quot; xmlns:atom=&quot;http://www.w3.org/2005/Atom&quot; xmlns:app=&quot;http://www.w3.org/2007/app&quot; xmlns=&quot;http://www.w3.org/2007/app&quot;&amp;gt;
  &amp;lt;workspace&amp;gt;
    &amp;lt;atom:title&amp;gt;Default&amp;lt;/atom:title&amp;gt;
    &amp;lt;collection href=&quot;DevExpress_Persistent_BaseImpl_Event&quot;&amp;gt;
      &amp;lt;atom:title&amp;gt;DevExpress_Persistent_BaseImpl_Event&amp;lt;/atom:title&amp;gt;
    &amp;lt;/collection&amp;gt;
  &amp;lt;/workspace&amp;gt;
&amp;lt;/service&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the result:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;iso-8859-1&quot; standalone=&quot;yes&quot;?&amp;gt;
&amp;lt;feed xml:base=&quot;http://localhost/MultitierSolution.OData/ODataDemoService.svc/&quot; xmlns:d=&quot;http://schemas.microsoft.com/ado/2007/08/dataservices&quot; xmlns:m=&quot;http://schemas.microsoft.com/ado/2007/08/dataservices/metadata&quot; xmlns=&quot;http://www.w3.org/2005/Atom&quot;&amp;gt;
  &amp;lt;title type=&quot;text&quot;&amp;gt;DevExpress_Persistent_BaseImpl_Event&amp;lt;/title&amp;gt;
  &amp;lt;id&amp;gt;http://localhost/MultitierSolution.OData/ODataDemoService.svc/DevExpress_Persistent_BaseImpl_Event&amp;lt;/id&amp;gt;
  &amp;lt;updated&amp;gt;2012-07-21T22:58:09Z&amp;lt;/updated&amp;gt;
  &amp;lt;link rel=&quot;self&quot; title=&quot;DevExpress_Persistent_BaseImpl_Event&quot; href=&quot;DevExpress_Persistent_BaseImpl_Event&quot; /&amp;gt;
  &amp;lt;entry&amp;gt;
    &amp;lt;id&amp;gt;http://localhost/MultitierSolution.OData/ODataDemoService.svc/DevExpress_Persistent_BaseImpl_Event(guid&#39;61bf9c11-a05e-46fd-9a82-4eb91dabb1a2&#39;)&amp;lt;/id&amp;gt;
    &amp;lt;title type=&quot;text&quot;&amp;gt;&amp;lt;/title&amp;gt;
    &amp;lt;updated&amp;gt;2012-07-21T22:58:09Z&amp;lt;/updated&amp;gt;
    &amp;lt;author&amp;gt;
      &amp;lt;name /&amp;gt;
    &amp;lt;/author&amp;gt;
    &amp;lt;link rel=&quot;edit&quot; title=&quot;DevExpress_Persistent_BaseImpl_Event&quot; href=&quot;DevExpress_Persistent_BaseImpl_Event(guid&#39;61bf9c11-a05e-46fd-9a82-4eb91dabb1a2&#39;)&quot; /&amp;gt;
    &amp;lt;link rel=&quot;http://schemas.microsoft.com/ado/2007/08/dataservices/related/recurrencePattern&quot; type=&quot;application/atom+xml;type=entry&quot; title=&quot;recurrencePattern&quot; href=&quot;DevExpress_Persistent_BaseImpl_Event(guid&#39;61bf9c11-a05e-46fd-9a82-4eb91dabb1a2&#39;)/recurrencePattern&quot; /&amp;gt;
    &amp;lt;category term=&quot;MultitierSolutionModel.DevExpress_Persistent_BaseImpl_Event&quot; scheme=&quot;http://schemas.microsoft.com/ado/2007/08/dataservices/scheme&quot; /&amp;gt;
    &amp;lt;content type=&quot;application/xml&quot;&amp;gt;
      &amp;lt;m:properties&amp;gt;
        &amp;lt;d:oid m:type=&quot;Edm.Guid&quot;&amp;gt;61bf9c11-a05e-46fd-9a82-4eb91dabb1a2&amp;lt;/d:oid&amp;gt;
        &amp;lt;d:Subject&amp;gt;test3&amp;lt;/d:Subject&amp;gt;
        &amp;lt;d:Description&amp;gt;&amp;lt;/d:Description&amp;gt;
        &amp;lt;d:StartOn m:type=&quot;Edm.DateTime&quot;&amp;gt;2012-07-21T14:00:00&amp;lt;/d:StartOn&amp;gt;
        &amp;lt;d:EndOn m:type=&quot;Edm.DateTime&quot;&amp;gt;2012-07-21T15:30:00&amp;lt;/d:EndOn&amp;gt;
        &amp;lt;d:AllDay m:type=&quot;Edm.Boolean&quot;&amp;gt;false&amp;lt;/d:AllDay&amp;gt;
        &amp;lt;d:Location&amp;gt;&amp;lt;/d:Location&amp;gt;
        &amp;lt;d:Label m:type=&quot;Edm.Int32&quot;&amp;gt;0&amp;lt;/d:Label&amp;gt;
        &amp;lt;d:Status m:type=&quot;Edm.Int32&quot;&amp;gt;2&amp;lt;/d:Status&amp;gt;
        &amp;lt;d:Type m:type=&quot;Edm.Int32&quot;&amp;gt;0&amp;lt;/d:Type&amp;gt;
        &amp;lt;d:RecurrenceInfoXml m:null=&quot;true&quot; /&amp;gt;
      &amp;lt;/m:properties&amp;gt;
    &amp;lt;/content&amp;gt;
  &amp;lt;/entry&amp;gt;
  &amp;lt;entry&amp;gt;
    &amp;lt;id&amp;gt;http://localhost/MultitierSolution.OData/ODataDemoService.svc/DevExpress_Persistent_BaseImpl_Event(guid&#39;af62e758-f181-4702-8712-76111fb4705f&#39;)&amp;lt;/id&amp;gt;
    &amp;lt;title type=&quot;text&quot;&amp;gt;&amp;lt;/title&amp;gt;
    &amp;lt;updated&amp;gt;2012-07-21T22:58:09Z&amp;lt;/updated&amp;gt;
    &amp;lt;author&amp;gt;
      &amp;lt;name /&amp;gt;
    &amp;lt;/author&amp;gt;
    &amp;lt;link rel=&quot;edit&quot; title=&quot;DevExpress_Persistent_BaseImpl_Event&quot; href=&quot;DevExpress_Persistent_BaseImpl_Event(guid&#39;af62e758-f181-4702-8712-76111fb4705f&#39;)&quot; /&amp;gt;
    &amp;lt;link rel=&quot;http://schemas.microsoft.com/ado/2007/08/dataservices/related/recurrencePattern&quot; type=&quot;application/atom+xml;type=entry&quot; title=&quot;recurrencePattern&quot; href=&quot;DevExpress_Persistent_BaseImpl_Event(guid&#39;af62e758-f181-4702-8712-76111fb4705f&#39;)/recurrencePattern&quot; /&amp;gt;
    &amp;lt;category term=&quot;MultitierSolutionModel.DevExpress_Persistent_BaseImpl_Event&quot; scheme=&quot;http://schemas.microsoft.com/ado/2007/08/dataservices/scheme&quot; /&amp;gt;
    &amp;lt;content type=&quot;application/xml&quot;&amp;gt;
      &amp;lt;m:properties&amp;gt;
        &amp;lt;d:oid m:type=&quot;Edm.Guid&quot;&amp;gt;af62e758-f181-4702-8712-76111fb4705f&amp;lt;/d:oid&amp;gt;
        &amp;lt;d:Subject&amp;gt;some stuff&amp;lt;/d:Subject&amp;gt;
        &amp;lt;d:Description&amp;gt;&amp;lt;/d:Description&amp;gt;
        &amp;lt;d:StartOn m:type=&quot;Edm.DateTime&quot;&amp;gt;2012-07-21T07:30:00&amp;lt;/d:StartOn&amp;gt;
        &amp;lt;d:EndOn m:type=&quot;Edm.DateTime&quot;&amp;gt;2012-07-21T12:30:00&amp;lt;/d:EndOn&amp;gt;
        &amp;lt;d:AllDay m:type=&quot;Edm.Boolean&quot;&amp;gt;false&amp;lt;/d:AllDay&amp;gt;
        &amp;lt;d:Location&amp;gt;&amp;lt;/d:Location&amp;gt;
        &amp;lt;d:Label m:type=&quot;Edm.Int32&quot;&amp;gt;3&amp;lt;/d:Label&amp;gt;
        &amp;lt;d:Status m:type=&quot;Edm.Int32&quot;&amp;gt;2&amp;lt;/d:Status&amp;gt;
        &amp;lt;d:Type m:type=&quot;Edm.Int32&quot;&amp;gt;0&amp;lt;/d:Type&amp;gt;
        &amp;lt;d:RecurrenceInfoXml m:null=&quot;true&quot; /&amp;gt;
      &amp;lt;/m:properties&amp;gt;
    &amp;lt;/content&amp;gt;
  &amp;lt;/entry&amp;gt;
  &amp;lt;entry&amp;gt;
    &amp;lt;id&amp;gt;http://localhost/MultitierSolution.OData/ODataDemoService.svc/DevExpress_Persistent_BaseImpl_Event(guid&#39;e7d053b8-1970-4c0d-b6a3-c6c3dd3ca83a&#39;)&amp;lt;/id&amp;gt;
    &amp;lt;title type=&quot;text&quot;&amp;gt;&amp;lt;/title&amp;gt;
    &amp;lt;updated&amp;gt;2012-07-21T22:58:09Z&amp;lt;/updated&amp;gt;
    &amp;lt;author&amp;gt;
      &amp;lt;name /&amp;gt;
    &amp;lt;/author&amp;gt;
    &amp;lt;link rel=&quot;edit&quot; title=&quot;DevExpress_Persistent_BaseImpl_Event&quot; href=&quot;DevExpress_Persistent_BaseImpl_Event(guid&#39;e7d053b8-1970-4c0d-b6a3-c6c3dd3ca83a&#39;)&quot; /&amp;gt;
    &amp;lt;link rel=&quot;http://schemas.microsoft.com/ado/2007/08/dataservices/related/recurrencePattern&quot; type=&quot;application/atom+xml;type=entry&quot; title=&quot;recurrencePattern&quot; href=&quot;DevExpress_Persistent_BaseImpl_Event(guid&#39;e7d053b8-1970-4c0d-b6a3-c6c3dd3ca83a&#39;)/recurrencePattern&quot; /&amp;gt;
    &amp;lt;category term=&quot;MultitierSolutionModel.DevExpress_Persistent_BaseImpl_Event&quot; scheme=&quot;http://schemas.microsoft.com/ado/2007/08/dataservices/scheme&quot; /&amp;gt;
    &amp;lt;content type=&quot;application/xml&quot;&amp;gt;
      &amp;lt;m:properties&amp;gt;
        &amp;lt;d:oid m:type=&quot;Edm.Guid&quot;&amp;gt;e7d053b8-1970-4c0d-b6a3-c6c3dd3ca83a&amp;lt;/d:oid&amp;gt;
        &amp;lt;d:Subject&amp;gt;test&amp;lt;/d:Subject&amp;gt;
        &amp;lt;d:Description&amp;gt;&amp;lt;/d:Description&amp;gt;
        &amp;lt;d:StartOn m:type=&quot;Edm.DateTime&quot;&amp;gt;2012-07-21T01:00:00&amp;lt;/d:StartOn&amp;gt;
        &amp;lt;d:EndOn m:type=&quot;Edm.DateTime&quot;&amp;gt;2012-07-21T01:30:00&amp;lt;/d:EndOn&amp;gt;
        &amp;lt;d:AllDay m:type=&quot;Edm.Boolean&quot;&amp;gt;true&amp;lt;/d:AllDay&amp;gt;
        &amp;lt;d:Location&amp;gt;&amp;lt;/d:Location&amp;gt;
        &amp;lt;d:Label m:type=&quot;Edm.Int32&quot;&amp;gt;0&amp;lt;/d:Label&amp;gt;
        &amp;lt;d:Status m:type=&quot;Edm.Int32&quot;&amp;gt;2&amp;lt;/d:Status&amp;gt;
        &amp;lt;d:Type m:type=&quot;Edm.Int32&quot;&amp;gt;0&amp;lt;/d:Type&amp;gt;
        &amp;lt;d:RecurrenceInfoXml m:null=&quot;true&quot; /&amp;gt;
      &amp;lt;/m:properties&amp;gt;
    &amp;lt;/content&amp;gt;
  &amp;lt;/entry&amp;gt;
&amp;lt;/feed&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;winrt-client-consumption&quot;&gt;WinRT Client Consumption&lt;/h2&gt;

&lt;p&gt;This task is like the use of a regular WCF-Service. Use the &lt;code&gt;Add Service Reference&lt;/code&gt; command in Visual Studio:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.paraoffice.at/get/screenshots/odata-t4-winrt-mono-for-android-and-devexpres/Add%20Service%20Reference_2012-07-22_11-36-10.png&quot; alt=&quot;Add Service Reference for OData in Visual Studio&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Rebuild. Booom! What the heck!? It’s not compiling anymore. According to a &lt;a href=&quot;http://social.msdn.microsoft.com/Forums/en-US/winappswithcsharp/thread/c699fd8e-6178-4e1c-9a02-6db7a2b4db87&quot;&gt;bug&lt;/a&gt; in the code generation of VS12 in the xaml designers we cannot fix this error now :(&lt;/p&gt;

&lt;p&gt;But you catch the idea, right?&lt;/p&gt;

&lt;p&gt;Shame on you Microsoft! :&amp;gt;&lt;/p&gt;

&lt;h2 id=&quot;mono-for-android-client-consumption&quot;&gt;Mono For Android Client Consumption&lt;/h2&gt;

&lt;p&gt;This task is a little bit trickier (for sure, its not MS technologie). But hey, we’ve got still tools to help us here. &lt;/p&gt;

&lt;p&gt;I’ve found a &lt;a href=&quot;http://fizzylogic.azurewebsites.net/2011/05/06/using-odata-with-mono-for-android/&quot;&gt;blog post&lt;/a&gt; to create the client proxy on a Mono based platform.&lt;/p&gt;

&lt;p&gt;Create a custom tool entry under Visual Studio &lt;code&gt;Tools/External Tools...&lt;/code&gt; to make this task a little bit more comfortable.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.paraoffice.at/get/screenshots/odata-t4-winrt-mono-for-android-and-devexpres/External%20Tools_2012-07-22_13-33-32.png&quot; alt=&quot;Tools/External Tools... Property Window&quot; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\Windows\Microsoft.NET\Framework\v4.0.30319\DataSvcUtil.exe
/out:Client.cs /version:2.0 /uri:http://localhost/sampleservice/peoplefeed.svc
$(ProjectDir)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run the command with our Argument&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/out:Client.cs /version:2.0 /uri:http://localhost/MultitierSolution.OData/MultitierSolutionODataService.svc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add the generated &lt;code&gt;Client.cs&lt;/code&gt; file to the Mono For android project and add a reference to &lt;code&gt;System.Data.Services.Client&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I don’t know why this is no where documented. Neither on the &lt;a href=&quot;http://www.mono-project.com/WCF_Development&quot;&gt;Mono&lt;/a&gt; Documentation nor the &lt;a href=&quot;http://docs.xamarin.com/ios/tutorials/Working_with_Web_Services&quot;&gt;Mono for Android&lt;/a&gt; documentation.&lt;/p&gt;

&lt;h2 id=&quot;further-steps&quot;&gt;Further steps&lt;/h2&gt;

&lt;p&gt;In our &lt;a href=&quot;http://blog.paraoffice.at/real-mtier-with-devexpress-part2&quot;&gt;next post&lt;/a&gt; we implement the android client to see some action!&lt;/p&gt;

&lt;p&gt;This blog post is part of the &lt;a href=&quot;http://blog.paraoffice.at/real-mtier-with-devexpress&quot;&gt;real mtier with devexpress series&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;demo-source&quot;&gt;Demo Source&lt;/h2&gt;
&lt;p&gt;The source can be found at &lt;a href=&quot;https://bitbucket.org/biohazard999/multitiersolutionxaf&quot;&gt;Bitbucket&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;imported-comments&quot;&gt;Imported Comments&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Dennis:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;DevExpress, please think of us developers when designing your APIs, not business analysts and script kiddies :(&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You certainly have the point here, and I as a developer can fully understand your “righteous anger”. However, there is always the other side of the medal. By introducing EditorBrowsable(Never) and internal-use-only methods, and even keeping certain classes undocumented in our docs we try to save lives of a good number (if not the majority - call them VB.NET guys, if you want;-)) of our clients, so that they do not run into problems in the future by using some hidden APIs or suffering from changes or even removal of some undocumented classes. This “care” may affect guys like you, though. I am uncertain whether the golden mean exists here, but I think we are at least do our best maintaining the “balance”, and let’s be fair, not having “every second method we like to use is fucking Browsable(false) or internal “;-)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dennis:&lt;/strong&gt;
&amp;gt; Then, all of a sudden, DevExpress announced support for OData in combination with XPO. Hurray! Getting the hands on the first versions and the result was sobering. :(&lt;/p&gt;

&lt;p&gt;Yeah, that is true. It was the first and unofficial/open-source implementation solely created by Azret and then posted on CodePlex. Later we just included his dlls into the installer to avoid versioning pain with often DXperience updates. The official (it also complies with MS OData implementation) OData support was added in XPO in 12.1 and we highly recommend everyone consider migrating to this version.&lt;/p&gt;

&lt;p&gt;Finally, I really liked your blog posts, keep them coming! It will be interesting to see how you will implement business logic, and not just expose an OData feed. At the moment I think that the only feasible way to keep several client applications that share a common business model/logic is using the XAF application server that will provide security, validation, audit and other business logic. In one turn, OData service used by mobile, WinRT, whatever clients will connect to this application server instead of the direct access to the datatabase. Let’s also do not forget that although OData can be a “common denominator”, it is not “ideal”, especially as compared to basic feature XAF/XPO provide (I am talking about the lack of support for unsigned integers, enumerations, readonly properties, reference properties in descendants and numerous filtering limitations). Probably, this is not critical for mobile clients, though.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Manuel:&lt;/strong&gt;
&amp;gt; You certainly have the point here, and I as a developer can fully understand your “righteous anger”. However, there is always the other side of the medal. By introducing EditorBrowsable(Never) and internal-use-only methods, and even keeping certain classes undocumented in our docs we try to save lives of a good number (if not the majority - call them VB.NET guys, if you want;-)) of our clients, so that they do not run into problems in the future by using some hidden APIs or suffering from changes or even removal of some undocumented classes. This “care” may affect guys like you, though. I am uncertain whether the golden mean exists here, but I think we are at least do our best maintaining the “balance”, and let’s be fair, not having “every second method we like to use is fucking Browsable(false) or internal “;-)&lt;/p&gt;

&lt;p&gt;Dennis, don’t get me wrong at this point. I love XAF. I love the way things (can) flow. But if you try to spring out of this box, you can really get sad (as a developer). It took’s me months (in a kind of a working solution) to integrate Unity in our product to get a easy way to reuse and change our business logic. Since we are using XAF since 9.x (i guess) there was no way to migrate to DomainComponents. You could provide extensibility points to ease such tasks, but i see no effort of DexExpress to evolve this. So my anger. Nothing personally :)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Manuel:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Yeah, that is true. It was the first and unofficial/open-source implementation solely created by Azret and then posted on CodePlex. Later we just included his dlls into the installer to avoid versioning pain with often DXperience updates. The official (it also complies with MS OData implementation) OData support was added in XPO in 12.1 and we highly recommend everyone consider migrating to this version.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yes you are right, maybe i didn’t made this clear enough. From a developer perspective its often hard to say if its supported or not supported. I know that the first announce was only a blog serious of Azret. :) (and he did a good job)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Manuel:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Finally, I really liked your blog posts, keep them coming! It will be interesting to see how you will implement business logic, and not just expose an OData feed. At the moment I think that the only feasible way to keep several client applications that share a common business model/logic is using the XAF application server that will provide security, validation, audit and other business logic. In one turn, OData service used by mobile, WinRT, whatever clients will connect to this application server instead of the direct access to the datatabase. Let’s also do not forget that although OData can be a “common denominator”, it is not “ideal”, especially as compared to basic feature XAF/XPO provide (I am talking about the lack of support for unsigned integers, enumerations, readonly properties, reference properties in descendants and numerous filtering limitations). Probably, this is not critical for mobile clients, though.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;According to the blog post (as a serious) there will be lot of space to (re-) “implement” some features (like security).&lt;/p&gt;

&lt;p&gt;The limitations of OData seam logic, cause of the wide based client set (JS/ PHP / etc. don’t even know enumerations).&lt;/p&gt;

&lt;p&gt;In the point of “ideal” i must be inconsistent with your opinion. Cause its base layer is simple HTTP it IS in fact ideal. The whole bunch of overhead such as SOAP/WCF is removed. Mobile clients are to a fact of 99% data consumers. The filtering can be tricky, and maybe there is no 100% generic approach to filter them (but through meta-data services maybe :) ).&lt;/p&gt;

&lt;p&gt;The thinking of getting the data is an other approach like in a classic DBAL (like XPO). Save time on the client -&amp;gt; Better user-experience.&lt;/p&gt;

&lt;p&gt;greetings Manuel.&lt;/p&gt;

&lt;p&gt;Ps: I think i get the next article available on Monday :)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Manuel:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Finally i like to say that your products are great, and we CAN build great applications with DexExpress frameworks. But sometimes it’s hard in a developer perspective.. Drag a module into your project? Yes. But do stuff that comes out of the box? Hard.&lt;/p&gt;

&lt;p&gt;If you could provide a set of instructions (maybe covered by FxCOP rules) we could realize a real open source based framework solution. The instructions don’t have to be a full blown documentation, but a small “how to use devex internals” to use code such as in your system controllers used (reading source is sometimes really hard, to get all of your thoughts correct)&lt;/p&gt;

&lt;p&gt;If you like to refer to eXpand i have do disagree. eXpand is great, but the reintegration of modules takes partially weeks… or is simply not reinterateable cause of dependencies. We CAN make a plugin able architecture. we only have to work on it.&lt;/p&gt;
</description>
                <link>http://biohazard999.github.io/2013/02/22/real-mtier-with-devexpress-part1</link>
                <guid>http://biohazard999.github.io/2013/02/22/real-mtier-with-devexpress-part1</guid>
                <pubDate>2013-02-22T00:00:00+01:00</pubDate>
        </item>

        <item>
                <title>Welcome :)</title>
                <description>
&lt;pre&gt;&lt;code&gt;namespace ParaOffice.Developer.Blog
{
    public class Program
    {
        bool IsAlive { get { return true; } }

        [STAThread]
        static void Main(string[] args)
        {
            while(IsAlive)
               System.Console.WriteLine(&quot;Write Blog&quot;);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
                <link>http://biohazard999.github.io/2012/07/19/hello-blog</link>
                <guid>http://biohazard999.github.io/2012/07/19/hello-blog</guid>
                <pubDate>2012-07-19T00:00:00+02:00</pubDate>
        </item>

        <item>
                <title>Jekyll Introduction</title>
                <description>
&lt;p&gt;This Jekyll introduction will outline specifically  what Jekyll is and why you would want to use it.
Directly following the intro we’ll learn exactly &lt;em&gt;how&lt;/em&gt; Jekyll does what it does.&lt;/p&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;h3 id=&quot;what-is-jekyll&quot;&gt;What is Jekyll?&lt;/h3&gt;

&lt;p&gt;Jekyll is a parsing engine bundled as a ruby gem used to build static websites from
dynamic components such as templates, partials, liquid code, markdown, etc. Jekyll is known as “a simple, blog aware, static site generator”.&lt;/p&gt;

&lt;h3 id=&quot;examples&quot;&gt;Examples&lt;/h3&gt;

&lt;p&gt;This website is created with Jekyll. &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Sites&quot;&gt;Other Jekyll websites&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;what-does-jekyll-do&quot;&gt;What does Jekyll Do?&lt;/h3&gt;

&lt;p&gt;Jekyll is a ruby gem you install on your local system.
Once there you can call &lt;code&gt;jekyll --server&lt;/code&gt; on a directory and provided that directory
is setup in a way jekyll expects, it will do magic stuff like parse markdown/textile files,
compute categories, tags, permalinks, and construct your pages from layout templates and partials.&lt;/p&gt;

&lt;p&gt;Once parsed, Jekyll stores the result in a self-contained static &lt;code&gt;_site&lt;/code&gt; folder.
The intention here is that you can serve all contents in this folder statically from a plain static web-server.&lt;/p&gt;

&lt;p&gt;You can think of Jekyll as a normalish dynamic blog but rather than parsing content, templates, and tags
on each request, Jekyll does this once &lt;em&gt;beforehand&lt;/em&gt; and caches the &lt;em&gt;entire website&lt;/em&gt; in a folder for serving statically.&lt;/p&gt;

&lt;h3 id=&quot;jekyll-is-not-blogging-software&quot;&gt;Jekyll is Not Blogging Software&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Jekyll is a parsing engine.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Jekyll does not come with any content nor does it have any templates or design elements.
This is a common source of confusion when getting started.
Jekyll does not come with anything you actually use or see on your website - you have to make it.&lt;/p&gt;

&lt;h3 id=&quot;why-should-i-care&quot;&gt;Why Should I Care?&lt;/h3&gt;

&lt;p&gt;Jekyll is very minimalistic and very efficient.
The most important thing to realize about Jekyll is that it creates a static representation of your website requiring only a static web-server.
Traditional dynamic blogs like Wordpress require a database and server-side code.
Heavily trafficked dynamic blogs must employ a caching layer that ultimately performs the same job Jekyll sets out to do; serve static content.&lt;/p&gt;

&lt;p&gt;Therefore if you like to keep things simple and you prefer the command-line over an admin panel UI then give Jekyll a try.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developers like Jekyll because we can write content like we write code:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ability to write content in markdown or textile in your favorite text-editor.&lt;/li&gt;
  &lt;li&gt;Ability to write and preview your content via localhost.&lt;/li&gt;
  &lt;li&gt;No internet connection required.&lt;/li&gt;
  &lt;li&gt;Ability to publish via git.&lt;/li&gt;
  &lt;li&gt;Ability to host your blog on a static web-server.&lt;/li&gt;
  &lt;li&gt;Ability to host freely on GitHub Pages.&lt;/li&gt;
  &lt;li&gt;No database required.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;how-jekyll-works&quot;&gt;How Jekyll Works&lt;/h1&gt;

&lt;p&gt;The following is a complete but concise outline of exactly how Jekyll works.&lt;/p&gt;

&lt;p&gt;Be aware that core concepts are introduced in rapid succession without code examples.
This information is not intended to specifically teach you how to do anything, rather it
is intended to give you the &lt;em&gt;full picture&lt;/em&gt; relative to what is going on in Jekyll-world.&lt;/p&gt;

&lt;p&gt;Learning these core concepts should help you avoid common frustrations and ultimately
help you better understand the code examples contained throughout Jekyll-Bootstrap.&lt;/p&gt;

&lt;h2 id=&quot;initial-setup&quot;&gt;Initial Setup&lt;/h2&gt;

&lt;p&gt;After &lt;a href=&quot;/index.html#start-now&quot;&gt;installing jekyll&lt;/a&gt; you’ll need to format your website directory in a way jekyll expects.
Jekyll-bootstrap conveniently provides the base directory format.&lt;/p&gt;

&lt;h3 id=&quot;the-jekyll-application-base-format&quot;&gt;The Jekyll Application Base Format&lt;/h3&gt;

&lt;p&gt;Jekyll expects your website directory to be laid out like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- _config.yml
|-- _includes
|-- _layouts
|   |-- default.html
|   |-- post.html
|-- _posts
|   |-- 2011-10-25-open-source-is-good.markdown
|   |-- 2011-04-26-hello-world.markdown
|-- _site
|-- index.html
|-- assets
    |-- css
        |-- style.css
    |-- javascripts
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_config.yml&lt;/strong&gt;
  Stores configuration data.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_includes&lt;/strong&gt;
  This folder is for partial views.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_layouts&lt;/strong&gt;
  This folder is for the main templates your content will be inserted into.
  You can have different layouts for different pages or page sections.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_posts&lt;/strong&gt;
  This folder contains your dynamic content/posts.
  the naming format is required to be &lt;code&gt;@YEAR-MONTH-DATE-title.MARKUP@&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_site&lt;/strong&gt;
  This is where the generated site will be placed once Jekyll is done transforming it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;assets&lt;/strong&gt;
  This folder is not part of the standard jekyll structure.
  The assets folder represents &lt;em&gt;any generic&lt;/em&gt; folder you happen to create in your root directory.
  Directories and files not properly formatted for jekyll will be left untouched for you to serve normally.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(read more: &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Usage&quot;&gt;https://github.com/mojombo/jekyll/wiki/Usage&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id=&quot;jekyll-configuration&quot;&gt;Jekyll Configuration&lt;/h3&gt;

&lt;p&gt;Jekyll supports various configuration options that are fully outlined here:
(&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Configuration&quot;&gt;https://github.com/mojombo/jekyll/wiki/Configuration&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;content-in-jekyll&quot;&gt;Content in Jekyll&lt;/h2&gt;

&lt;p&gt;Content in Jekyll is either a post or a page.
These content “objects” get inserted into one or more templates to build the final output for its respective static-page.&lt;/p&gt;

&lt;h3 id=&quot;posts-and-pages&quot;&gt;Posts and Pages&lt;/h3&gt;

&lt;p&gt;Both posts and pages should be written in markdown, textile, or HTML and may also contain Liquid templating syntax.
Both posts and pages can have meta-data assigned on a per-page basis such as title, url path, as well as arbitrary custom meta-data.&lt;/p&gt;

&lt;h3 id=&quot;working-with-posts&quot;&gt;Working With Posts&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Post&lt;/strong&gt;
Posts are created by properly formatting a file and placing it the &lt;code&gt;_posts&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;
A post must have a valid filename in the form &lt;code&gt;YEAR-MONTH-DATE-title.MARKUP&lt;/code&gt; and be placed in the &lt;code&gt;_posts&lt;/code&gt; directory.
If the data format is invalid Jekyll will not recognize the file as a post. The date and title are automatically parsed from the filename of the post file.
Additionally, each file must have &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;YAML Front-Matter&lt;/a&gt; prepended to its content.
YAML Front-Matter is a valid YAML syntax specifying meta-data for the given file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Order&lt;/strong&gt;
Ordering is an important part of Jekyll but it is hard to specify a custom ordering strategy.
Only reverse chronological and chronological ordering is supported in Jekyll.&lt;/p&gt;

&lt;p&gt;Since the date is hard-coded into the filename format, to change the order, you must change the dates in the filenames.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;
Posts can have tags associated with them as part of their meta-data.
Tags may be placed on posts by providing them in the post’s YAML front matter.
You have access to the post-specific tags in the templates. These tags also get added to the sitewide collection.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories&lt;/strong&gt;
Posts may be categorized by providing one or more categories in the YAML front matter.
Categories offer more significance over tags in that they can be reflected in the URL path to the given post.
Note categories in Jekyll work in a specific way.
If you define more than one category you are defining a category hierarchy “set”.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title :  Hello World
categories : [lessons, beginner]
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This defines the category hierarchy “lessons/beginner”. Note this is &lt;em&gt;one category&lt;/em&gt; node in Jekyll.
You won’t find “lessons” and “beginner” as two separate categories unless you define them elsewhere as singular categories.&lt;/p&gt;

&lt;h3 id=&quot;working-with-pages&quot;&gt;Working With Pages&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Page&lt;/strong&gt;
Pages are created by properly formatting a file and placing it anywhere in the root directory or subdirectories that do &lt;em&gt;not&lt;/em&gt; start with an underscore.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;
In order to register as a Jekyll page the file must contain &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;YAML Front-Matter&lt;/a&gt;.
Registering a page means 1) that Jekyll will process the page and 2) that the page object will be available in the &lt;code&gt;site.pages&lt;/code&gt; array for inclusion into your templates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories and Tags&lt;/strong&gt;
Pages do not compute categories nor tags so defining them will have no effect.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sub-Directories&lt;/strong&gt;
If pages are defined in sub-directories, the path to the page will be reflected in the url.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- people
    |-- bob
        |-- essay.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This page will be available at &lt;code&gt;http://yourdomain.com/people/bob/essay.html&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recommended Pages&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;index.html&lt;/strong&gt;
You will always want to define the root index.html page as this will display on your root URL.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;404.html&lt;/strong&gt;
Create a root 404.html page and GitHub Pages will serve it as your 404 response.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;sitemap.html&lt;/strong&gt;
Generating a sitemap is good practice for SEO.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;about.html&lt;/strong&gt;
A nice about page is easy to do and gives the human perspective to your website.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;templates-in-jekyll&quot;&gt;Templates in Jekyll&lt;/h2&gt;

&lt;p&gt;Templates are used to contain a page’s or post’s content.
All templates have access to a global site object variable: &lt;code&gt;site&lt;/code&gt; as well as a page object variable: &lt;code&gt;page&lt;/code&gt;.
The site variable holds all accessible content and metadata relative to the site.
The page variable holds accessible data for the given page or post being rendered at that point.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create a Template&lt;/strong&gt;
Templates are created by properly formatting a file and placing it in the &lt;code&gt;_layouts&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;
Templates should be coded in HTML and contain YAML Front Matter.
All templates can contain Liquid code to work with your site’s data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rending Page/Post Content in a Template&lt;/strong&gt;
There is a special variable in all templates named : &lt;code&gt;content&lt;/code&gt;.
The &lt;code&gt;content&lt;/code&gt; variable holds the page/post content including any sub-template content previously defined.
Render the content variable wherever you want your main content to be injected into your template:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...
&amp;lt;body&amp;gt;
  &amp;lt;div id=&quot;sidebar&quot;&amp;gt; ... &amp;lt;/div&amp;gt;
  &amp;lt;div id=&quot;main&quot;&amp;gt;
    &amp;#123;{content}&amp;#125;
  &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
...&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;sub-templates&quot;&gt;Sub-Templates&lt;/h3&gt;

&lt;p&gt;Sub-templates are exactly templates with the only difference being they
define another “root” layout/template within their YAML Front Matter.
This essentially means a template will render inside of another template.&lt;/p&gt;

&lt;h3 id=&quot;includes&quot;&gt;Includes&lt;/h3&gt;
&lt;p&gt;In Jekyll you can define include files by placing them in the &lt;code&gt;_includes&lt;/code&gt; folder.
Includes are NOT templates, rather they are just code snippets that get included into templates.
In this way, you can treat the code inside includes as if it was native to the parent template.&lt;/p&gt;

&lt;p&gt;Any valid template code may be used in includes.&lt;/p&gt;

&lt;h2 id=&quot;using-liquid-for-templating&quot;&gt;Using Liquid for Templating&lt;/h2&gt;

&lt;p&gt;Templating is perhaps the most confusing and frustrating part of Jekyll.
This is mainly due to the fact that Jekyll templates must use the Liquid Templating Language.&lt;/p&gt;

&lt;h3 id=&quot;what-is-liquid&quot;&gt;What is Liquid?&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Shopify/liquid&quot;&gt;Liquid&lt;/a&gt; is a secure templating language developed by &lt;a href=&quot;http://shopify.com&quot;&gt;Shopify&lt;/a&gt;.
Liquid is designed for end-users to be able to execute logic within template files
without imposing any security risk on the hosting server.&lt;/p&gt;

&lt;p&gt;Jekyll uses Liquid to generate the post content within the final page layout structure and as the primary interface for working with
your site and post/page data.&lt;/p&gt;

&lt;h3 id=&quot;why-do-we-have-to-use-liquid&quot;&gt;Why Do We Have to Use Liquid?&lt;/h3&gt;

&lt;p&gt;GitHub uses Jekyll to power &lt;a href=&quot;http://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;.
GitHub cannot afford to run arbitrary code on their servers so they lock developers down via Liquid.&lt;/p&gt;

&lt;h3 id=&quot;liquid-is-not-programmer-friendly&quot;&gt;Liquid is Not Programmer-Friendly.&lt;/h3&gt;

&lt;p&gt;The short story is liquid is not real code and its not intended to execute real code.
The point being you can’t do jackshit in liquid that hasn’t been allowed explicitly by the implementation.
What’s more you can only access data-structures that have been explicitly passed to the template.&lt;/p&gt;

&lt;p&gt;In Jekyll’s case it is not possible to alter what is passed to Liquid without hacking the gem or running custom plugins.
Both of which cannot be supported by GitHub Pages.&lt;/p&gt;

&lt;p&gt;As a programmer - this is very frustrating.&lt;/p&gt;

&lt;p&gt;But rather than look a gift horse in the mouth we are going to
suck it up and view it as an opportunity to work around limitations and adopt client-side solutions when possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aside&lt;/strong&gt;
My personal stance is to not invest time trying to hack liquid. It’s really unnecessary
&lt;em&gt;from a programmer’s&lt;/em&gt; perspective. That is to say if you have the ability to run custom plugins (i.e. run arbitrary ruby code)
you are better off sticking with ruby. Toward that end I’ve built &lt;a href=&quot;http://github.com/plusjade/mustache-with-jekyll&quot;&gt;Mustache-with-Jekyll&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;static-assets&quot;&gt;Static Assets&lt;/h2&gt;

&lt;p&gt;Static assets are any file in the root or non-underscored subfolders that are not pages.
That is they have no valid YAML Front Matter and are thus not treated as Jekyll Pages.&lt;/p&gt;

&lt;p&gt;Static assets should be used for images, css, and javascript files.&lt;/p&gt;

&lt;h2 id=&quot;how-jekyll-parses-files&quot;&gt;How Jekyll Parses Files&lt;/h2&gt;

&lt;p&gt;Remember Jekyll is a processing engine. There are two main types of parsing in Jekyll.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Content parsing.&lt;/strong&gt;
  This is done with textile or markdown.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Template parsing.&lt;/strong&gt;
This is done with the liquid templating language.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And thus there are two main types of file formats needed for this parsing.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Post and Page files.&lt;/strong&gt;
All content in Jekyll is either a post or a page so valid posts and pages are parsed with markdown or textile.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Template files.&lt;/strong&gt;
  These files go in &lt;code&gt;_layouts&lt;/code&gt; folder and contain your blogs &lt;strong&gt;templates&lt;/strong&gt;. They should be made in HTML with the help of Liquid syntax.
  Since include files are simply injected into templates they are essentially parsed as if they were native to the template.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Arbitrary files and folders.&lt;/strong&gt;
Files that &lt;em&gt;are not&lt;/em&gt; valid pages are treated as static content and pass through
Jekyll untouched and reside on your blog in the exact structure and format they originally existed in.&lt;/p&gt;

&lt;h3 id=&quot;formatting-files-for-parsing&quot;&gt;Formatting Files for Parsing.&lt;/h3&gt;

&lt;p&gt;We’ve outlined the need for valid formatting using &lt;strong&gt;YAML Front Matter&lt;/strong&gt;.
Templates, posts, and pages all need to provide valid YAML Front Matter even if the Matter is empty.
This is the only way Jekyll knows you want the file processed.&lt;/p&gt;

&lt;p&gt;YAML Front Matter must be prepended to the top of template/post/page files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
layout: post
category : pages
tags : [how-to, jekyll]
---

... contents ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Three hyphens on a new line start the Front-Matter block and three hyphens on a new line end the block.
The data inside the block must be valid YAML.&lt;/p&gt;

&lt;p&gt;Configuration parameters for YAML Front-Matter is outlined here:
&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;A comprehensive explanation of YAML Front Matter&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;defining-layouts-for-posts-and-templates-parsing&quot;&gt;Defining Layouts for Posts and Templates Parsing.&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;layout&lt;/code&gt; parameter in the YAML Front Matter defines the template file for which the given post or template should be injected into.
If a template file specifies its own layout, it is effectively being used as a &lt;code&gt;sub-template.&lt;/code&gt;
That is to say loading a post file into a template file that refers to another template file with work in the way you’d expect; as a nested sub-template.&lt;/p&gt;

&lt;h2 id=&quot;how-jekyll-generates-the-final-static-files&quot;&gt;How Jekyll Generates the Final Static Files.&lt;/h2&gt;

&lt;p&gt;Ultimately, Jekyll’s job is to generate a static representation of your website.
The following is an outline of how that’s done:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Jekyll collects data.&lt;/strong&gt;
  Jekyll scans the posts directory and collects all posts files as post objects. It then scans the layout assets and collects those and finally scans other directories in search of pages.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Jekyll computes data.&lt;/strong&gt;
  Jekyll takes these objects, computes metadata (permalinks, tags, categories, titles, dates) from them and constructs one
  big &lt;code&gt;site&lt;/code&gt; object that holds all the posts, pages, layouts, and respective metadata.
  At this stage your site is one big computed ruby object.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Jekyll liquifies posts and templates.&lt;/strong&gt;
  Next jekyll loops through each post file and converts (through markdown or textile) and &lt;strong&gt;liquifies&lt;/strong&gt; the post inside of its respective layout(s).
  Once the post is parsed and liquified inside the the proper layout structure, the layout itself is “liquified”.
 &lt;strong&gt;Liquification&lt;/strong&gt; is defined as follows: Jekyll initiates a Liquid template, and passes a simpler hash representation of the ruby site object as well as a simpler
  hash representation of the ruby post object. These simplified data structures are what you have access to in the templates.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Jekyll generates output.&lt;/strong&gt;
 Finally the liquid templates are “rendered”, thereby processing any liquid syntax provided in the templates
 and saving the final, static representation of the file.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Notes.&lt;/strong&gt;
Because Jekyll computes the entire site in one fell swoop, each template is given access to
a global &lt;code&gt;site&lt;/code&gt; hash that contains useful data. It is this data that you’ll iterate through and format
using the Liquid tags and filters in order to render it onto a given page.&lt;/p&gt;

&lt;p&gt;Remember, in Jekyll you are an end-user. Your API has only two components:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The manner in which you setup your directory.&lt;/li&gt;
  &lt;li&gt;The liquid syntax and variables passed into the liquid templates.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All the data objects available to you in the templates via Liquid are outlined in the &lt;strong&gt;API Section&lt;/strong&gt; of Jekyll-Bootstrap.
You can also read the original documentation here: &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Template-Data&quot;&gt;https://github.com/mojombo/jekyll/wiki/Template-Data&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope this paints a clearer picture of what Jekyll is doing and why it works the way it does.
As noted, our main programming constraint is the fact that our API is limited to what is accessible via Liquid and Liquid only.&lt;/p&gt;

&lt;p&gt;Jekyll-bootstrap is intended to provide helper methods and strategies aimed at making it more intuitive and easier to work with Jekyll =)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thank you&lt;/strong&gt; for reading this far.&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;Please take a look at []()
or jump right into &lt;a href=&quot;&quot;&gt;Usage&lt;/a&gt; if you’d like.&lt;/p&gt;
</description>
                <link>http://biohazard999.github.io/lessons/2011/12/29/jekyll-introduction</link>
                <guid>http://biohazard999.github.io/lessons/2011/12/29/jekyll-introduction</guid>
                <pubDate>2011-12-29T00:00:00+01:00</pubDate>
        </item>


</channel>
</rss>
